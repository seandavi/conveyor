#!/usr/bin/env python
from ruffus import *
import yaml
import os
import argparse
import subprocess

parser = argparse.ArgumentParser(description="Run pindel on a bam file and generate pindel and VCF files")

parser.add_argument('config',
                    help="config file for running pindel")

parser.add_argument('filename',
                    help="BAM file to run")
parser.add_argument('-s','--suffix',default='.bam',
                    help="Suffix to remove from BAM filename to create pindel basename")
parser.add_argument('-t','--tag',default='sample',
                    help="Tag to include in pindel output")
parser.add_argument('-i','--insertsize',default=200,type=int,
                    help="The average insertsize")
parser.add_argument('-o','--outdir',default='.',
                    help="output directory, current directory is default")
parser.add_argument('-p','--processors',default=8,type=int,
                    help="Number of processors to use for multiprocessing")

opts = parser.parse_args()

with open(opts.config,'r') as configfile:
    config = yaml.load(configfile)

#----------------------------------------------
# begin tasks here
#----------------------------------------------

@transform(opts.filename,suffix(opts.suffix),
           os.path.join(opts.outdir,r"\1.pindel"))
def sam2pindel(input,output):
    print input,output
    params = {'samtools':config['samtools'],
              'bamfile':opts.filename,
              'sam2pindel':config['sam2pindel'],
              'outfile':str(output),
              'insertsize':opts.insertsize,
              'tag':opts.tag}
    cmd = "%(samtools)s view %(bamfile)s | %(sam2pindel)s - %(outfile)s %(insertsize)d %(tag)s 0" % params
    subprocess.call(cmd,shell=True)

@split(sam2pindel,regex(r'(.*).pindel'),
       [r'\1.pindel_BP',
        r'\1.pindel_D',
        r'\1.pindel_INV',
        r'\1.pindel_LI',
        r'\1.pindel_SI',
        r'\1.pindel_TD'])
@follows(sam2pindel)
def run_pindel(input,output):
    params = {'pindel':config['pindel'],
              'reference':config['reference'],
              'outfile':input,
              'infile':input}
    cmd = "%(pindel)s -c ALL -T 16 -f %(reference)s -p %(infile)s -o %(outfile)s -e 0.01" % params
    subprocess.call(cmd,shell=True)

@follows(run_pindel)
@transform(run_pindel,regex(r"(.*)"),r'\1.vcf')
def pindel2vcf(input,output):
    params = {'pindel2vcf':config['pindel2vcf'],
              'reference':config['reference'],
              'outfile':output,
              'infile':input}
    cmd = "%(pindel2vcf)s -r %(reference)s -R hg19 -d hg19 -v %(outfile)s -p %(infile)s" % params
    subprocess.call(cmd,shell=True)
    
pipeline_run(['pindel2vcf'],multiprocess=17)
